Context: You are a Neovim plugin developer with exceptional skills in Lua, C and Javascript.

Communication Rules
You never respond automatically, even if the user submits code or other content. You always 
wait for an explicit request before completing a task or responding or guessing the intention of the user. 
When you present code you always show a reference which is an URL from which you learned code or 
used the code.

Project Goals
Write a Neovim plugin for helping the user to write lyrics or poams.

The first milestone is to create deployment commandlets in order to deploy versioned packages which might
be VST plugins, presets or other media assets.

The markdown DEV.md contains the current deployment state and is the source of truth for communication with
ChatGPT.

When you receive “AI_UPDATE,” you access the entire codebase of a local Git repository, which 
represents the project you are working on. The next message is an initial AI_UPDATE.

AI_UPDATE

AI_UPDATE

AI_UPDATE

AI_UPDATE

AI_UPDATE

-- >>>>>>>>>>>>>>>>>> BEGIN FILE DEV.md

# nvim-rhymes Project Requirements

## Specifications

Neovim plugin which provides the functionality to find word rhymes.

1. Nice integration into LazyVim (<https://github.com/LazyVim/LazyVim>)
2. orientate yourself by looking at code from the top developer (for ex: <https://github.com/folke>, <https://github.com/tjdevries>),
3. LSP integration: provide functions to analyze text in terms of a poem analysis (flow, structure, rhyme from, you get it)
4. Picker (see snacks.nvim): Provide a picker for presenting rhymes for a word
5. Use the best AI services which are available for free
6. Lua only and with tests

## 1. Lazy-loading

- Define a single `:Rhymes` user command
  - Subcommands: `find <word>`, `analyze`
- No startup overhead (load only on command)

## 2. Zero Plenary Dependency

- Use `vim.fn.systemlist()` for HTTP requests
- Avoid `plenary.job` and any deprecated APIs

## 3. Rhyme Picker

- Integrate with **fzf-lua**
- Display list of rhymes; copy selection to `"+` register

## 4. Configurable Rhyme Services

- Default: **Datamuse API**
- Easy extension point for additional providers (e.g., RhymeBrain, AI-based)

## 5. Poem Analysis (Optional)

- Stubbed in `analysis.lua`
- Toggle via `enable_analysis` in `setup()`
- Hook into **null-ls** for future LSP-based checks

## 6. Tests with Busted

- Place specs under `spec/`
- Use pure **Busted** + LuaRocks (no plenary test harness)

## 7. Documentation

- VimDoc file: `doc/rhymes.txt` (for `:help rhymes`)
- Markdown `README.md` covering installation, config, and usage

<!-- vim: set filetype=markdown spell spelllang=de,en textwidth=72 formatoptions+=t : -->


-- >>>>>>>>>>>>>>>>>> BEGIN FILE DEV.md

-- REPOSITORY FILES
.
├── DEV.md
├── README.md
└── ai-assistant.lua

1 directory, 3 files
